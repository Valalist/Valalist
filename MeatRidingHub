local MarketplaceService = game:GetService("MarketplaceService")
local placeId = game.PlaceId
local success, placeInfo = pcall(function()
    return MarketplaceService:GetProductInfo(placeId)
end)
local gameName = success and placeInfo.Name or "Unknown Game"

local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "Meat Riding HUB | " .. gameName,
    LoadingTitle = "Hi this is loading",
    LoadingSubtitle = "Fuck you",
    ConfigurationSaving = {
        Enabled = false
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false
})

local Tab = Window:CreateTab("Main")

Tab:CreateLabel("+ Auto-Collect features has been temporarily deleted.")

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

-- Auto Rebirth
local rebirthRunning = false
local rebirthConnection

Tab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirthToggle",
    Callback = function(state)
        rebirthRunning = state
        if rebirthRunning then
            rebirthConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local button = player.PlayerGui.Main.SideButtons.MiddleFrame.RebirthButton.Image.notification
                if button and button.Visible then
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Rebirth"):FireServer()
                end
            end)
        else
            if rebirthConnection then
                rebirthConnection:Disconnect()
                rebirthConnection = nil
            end
        end
    end,
})

-- Auto Claim Gifts
local giftsRunning = false
local giftsConnection

local remotes = game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
local claim = remotes:WaitForChild("ClaimTimeReward")
local rewards = {120, 180, 240, 300, 600, 900, 1800, 3600}

Tab:CreateToggle({
    Name = "Auto-Claim Gifts",
    CurrentValue = false,
    Flag = "AutoClaimGiftsToggle",
    Callback = function(state)
        giftsRunning = state
        if giftsRunning then
            giftsConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local notif = player.PlayerGui.Main.SideButtons.BottomFrame.GiftsButton.Image.notification
                if notif and notif.Visible then
                    for _, t in ipairs(rewards) do
                        claim:FireServer(t)
                        task.wait(0.1)
                    end
                end
            end)
        else
            if giftsConnection then
                giftsConnection:Disconnect()
                giftsConnection = nil
            end
        end
    end,
})

-- Extra Tab
local ExtraTab = Window:CreateTab("Extra")

ExtraTab:CreateButton({
    Name = "Purchase Space",
    Callback = function()
        local purchaseFrame = player.PlayerGui:WaitForChild("Frames"):WaitForChild("PurchaseWorld")
        if purchaseFrame then
            purchaseFrame.Visible = true
        end
    end,
})

ExtraTab:CreateButton({
    Name = "Unlock All Areas",
    Callback = function()
        local areasFolder = workspace.Map:WaitForChild("Areas")
        local originalCFrame = root.CFrame
        for _, part in ipairs(areasFolder:GetChildren()) do
            if part:IsA("BasePart") then
                root.CFrame = part.CFrame + Vector3.new(0,5,0)
                task.wait(0.3)
            end
        end
        root.CFrame = originalCFrame
    end,
})

ExtraTab:CreateButton({
    Name = "Complete-All Quests",
    Callback = function()
        local questsFrame = player.PlayerGui:WaitForChild("Frames"):WaitForChild("QuestsFrame")
        local mainFrame = questsFrame:WaitForChild("Main")
        local claimRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimQuest")
        for _, quest in ipairs(mainFrame:GetChildren()) do
            if quest:IsA("Frame") then
                local args = {quest.Name}
                claimRemote:FireServer(unpack(args))
                task.wait(0.1)
            end
        end
    end,
})

-- Note Tab
local NoteTab = Window:CreateTab("Note")
NoteTab:CreateLabel("+ Update V0.4 Deleted Auto-Collect Rings, Auto-Collect Coins. Reason: PATCHED")
NoteTab:CreateLabel("+ Update V0.3 - Added Complete-All Quests in Extra tab.")
NoteTab:CreateLabel("+ Update V0.2 - Added Auto-Collect Coins in the Main tab.")
NoteTab:CreateLabel("+ This script will NOT receive any updates")
